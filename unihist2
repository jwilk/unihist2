#!/usr/bin/python3

# Copyright Â© 2021 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import collections
import signal
import sys
import unicodedata

f'{0}'  # Python >= 3.6 is required

chunk_size = 64 * 1024

def read_file(data, file):
    while True:
        chunk = file.read(chunk_size)
        if not chunk:
            break
        for ch in chunk:
            data[ch] += 1

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('paths', metavar='FILE', nargs='*',
        help='file to analyze (default: stdin)'
    )
    options = ap.parse_args()
    signal.signal(signal.SIGPIPE, signal.SIG_DFL)
    data = collections.Counter()
    for path in options.paths or ['-']:
        if path == '-':
            read_file(data, sys.stdin)
        else:
            with open(path, 'rt') as file:
                read_file(data, file)
    for ch, count in sorted(data.items()):
        pt = ord(ch)
        cat = unicodedata.category(ch)
        name = unicodedata.name(ch, '')
        if not name:
            if cat == 'Cn':
                name = 'non-character'
            elif cat == 'Cc':
                # TODO: elaborate
                name = 'control character'
            elif cat == 'Cs':
                name = 'lone surrogate'
        glyph = ch
        if cat[0] == 'C':
            glyph = ''
        elif cat[0] == 'M':
            glyph = '\N{DOTTED CIRCLE}' + ch
        print(f'{count}\t{glyph}\tU+{pt:04X}\t{name or ""}')

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
