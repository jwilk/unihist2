#!/usr/bin/env python3
# encoding=UTF-8

# Copyright © 2021-2024 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import collections
import re
import signal
import sys

try:
    import unicodedata2 as udata
except ImportError:
    import unicodedata as udata

async def _(): f'{await "# Python >= 3.7 is required #"}'

__version__ = '0'  # not released yet

def trim_version(s):
    return re.sub(r'([.]\d+)[.]0\Z', r'\1', s)

class VersionAction(argparse.Action):
    '''
    argparse --version action
    '''

    def __init__(self, option_strings, dest=argparse.SUPPRESS):
        super().__init__(
            option_strings=option_strings,
            dest=dest,
            nargs=0,
            help='show version information and exit'
        )

    def __call__(self, parser, namespace, values, option_string=None):
        print(f'{parser.prog} {__version__}')
        print('+ Python {0}.{1}.{2}'.format(*sys.version_info))
        unidata_ver = trim_version(udata.unidata_version)
        if udata.__name__ == 'unicodedata2':
            print('+ unicodedata2')
        print(f'  + Unicode {unidata_ver}')
        try:
            import regex
        except ImportError:
            pass
        else:
            print(f'+ regex {regex.__version__}')
        parser.exit()

chunk_size = 64 * 1024

def read_file_basic(data, file):
    if file.isatty():
        read = file.readline
    else:
        read = file.read
    while True:
        chunk = read(chunk_size)
        if not chunk:
            break
        for ch in chunk:
            data[ch] += 1

def read_file_egc(data, file):
    # Python stdlib doesn't support grapheme clustering yet:
    # https://github.com/python/cpython/issues/74902
    # Use third-party library in the mean time.
    import regex
    tail = ''
    if file.isatty():
        read = file.readline
    else:
        read = file.read
    while True:
        chunk = read(chunk_size)
        chars = regex.findall(r'\X', tail + chunk)
        tail = chars.pop() if chars else ''
        for clt in chars:
            data[clt] += 1
        if not chunk:
            break
    if tail:
        data[tail] += 1

_cc_names = {  # generated by private/gen-cc-names
    '\x00': 'NULL',
    '\x01': 'START OF HEADING',
    '\x02': 'START OF TEXT',
    '\x03': 'END OF TEXT',
    '\x04': 'END OF TRANSMISSION',
    '\x05': 'ENQUIRY',
    '\x06': 'ACKNOWLEDGE',
    '\x07': 'ALERT',
    '\x08': 'BACKSPACE',
    '\x09': 'CHARACTER TABULATION',
    '\x0A': 'LINE FEED',
    '\x0B': 'LINE TABULATION',
    '\x0C': 'FORM FEED',
    '\x0D': 'CARRIAGE RETURN',
    '\x0E': 'SHIFT OUT',
    '\x0F': 'SHIFT IN',
    '\x10': 'DATA LINK ESCAPE',
    '\x11': 'DEVICE CONTROL ONE',
    '\x12': 'DEVICE CONTROL TWO',
    '\x13': 'DEVICE CONTROL THREE',
    '\x14': 'DEVICE CONTROL FOUR',
    '\x15': 'NEGATIVE ACKNOWLEDGE',
    '\x16': 'SYNCHRONOUS IDLE',
    '\x17': 'END OF TRANSMISSION BLOCK',
    '\x18': 'CANCEL',
    '\x19': 'END OF MEDIUM',
    '\x1A': 'SUBSTITUTE',
    '\x1B': 'ESCAPE',
    '\x1C': 'INFORMATION SEPARATOR FOUR',
    '\x1D': 'INFORMATION SEPARATOR THREE',
    '\x1E': 'INFORMATION SEPARATOR TWO',
    '\x1F': 'INFORMATION SEPARATOR ONE',
    '\x7F': 'DELETE',
    '\x80': 'PADDING CHARACTER',
    '\x81': 'HIGH OCTET PRESET',
    '\x82': 'BREAK PERMITTED HERE',
    '\x83': 'NO BREAK HERE',
    '\x84': 'INDEX',
    '\x85': 'NEXT LINE',
    '\x86': 'START OF SELECTED AREA',
    '\x87': 'END OF SELECTED AREA',
    '\x88': 'CHARACTER TABULATION SET',
    '\x89': 'CHARACTER TABULATION WITH JUSTIFICATION',
    '\x8A': 'LINE TABULATION SET',
    '\x8B': 'PARTIAL LINE FORWARD',
    '\x8C': 'PARTIAL LINE BACKWARD',
    '\x8D': 'REVERSE LINE FEED',
    '\x8E': 'SINGLE SHIFT TWO',
    '\x8F': 'SINGLE SHIFT THREE',
    '\x90': 'DEVICE CONTROL STRING',
    '\x91': 'PRIVATE USE ONE',
    '\x92': 'PRIVATE USE TWO',
    '\x93': 'SET TRANSMIT STATE',
    '\x94': 'CANCEL CHARACTER',
    '\x95': 'MESSAGE WAITING',
    '\x96': 'START OF GUARDED AREA',
    '\x97': 'END OF GUARDED AREA',
    '\x98': 'START OF STRING',
    '\x99': 'SINGLE GRAPHIC CHARACTER INTRODUCER',
    '\x9A': 'SINGLE CHARACTER INTRODUCER',
    '\x9B': 'CONTROL SEQUENCE INTRODUCER',
    '\x9C': 'STRING TERMINATOR',
    '\x9D': 'OPERATING SYSTEM COMMAND',
    '\x9E': 'PRIVACY MESSAGE',
    '\x9F': 'APPLICATION PROGRAM COMMAND',
}

def get_char_name(ch):
    name = udata.name(ch, None)
    cat = udata.category(ch)
    if name:
        return name
    if cat == 'Cc':
        name = _cc_names.get(ch)
        if name:
            pt = ord(ch)
            try:
                assert udata.lookup(name) == ch, f'{name} != U+{pt:04X}'
            except KeyError:
                assert False, f'{name} != U+{pt:04X}'
            return name
    # use code point label as fallback
    # (see The Unicode Standard version 15.0, §4.8)
    label_prefix = dict(
        Cc='control',
        Cn='reserved',
        Co='private-use',
        Cs='surrogate',
    ).get(cat)
    pt = ord(ch)
    if pt & 0xFFFF >= 0xFFFE or 0xFDD0 <= pt < 0xFDF0:
        assert label_prefix == 'reserved'
        label_prefix = 'noncharacter'
    if label_prefix:
        return f'<{label_prefix}-{pt:04X}>'
    return None

def format_pts(s):
    return str.join(' ', (
        f'U+{ord(ch):04X}' for ch in s
    ))

def format_names(s):
    names = str.join(' + ', (
        get_char_name(ch) or '?'
        for ch in s
    ))
    if names == '?':
        names = ''
    return names

_double_comb = {  # generated by private/gen-double-comb
    '\u035D',  # COMBINING DOUBLE BREVE
    '\u035E',  # COMBINING DOUBLE MACRON
    '\u0360',  # COMBINING DOUBLE TILDE
    '\u0361',  # COMBINING DOUBLE INVERTED BREVE
    '\u1DCD',  # COMBINING DOUBLE CIRCUMFLEX ABOVE
    '\u035C',  # COMBINING DOUBLE BREVE BELOW
    '\u035F',  # COMBINING DOUBLE MACRON BELOW
    '\u0362',  # COMBINING DOUBLE RIGHTWARDS ARROW BELOW
    '\u1DFC',  # COMBINING DOUBLE INVERTED BREVE BELOW
}

_vs = {*map(chr, [  # generated by private/gen-vs
    0x180B,  # MONGOLIAN FREE VARIATION SELECTOR ONE
    0x180C,  # MONGOLIAN FREE VARIATION SELECTOR TWO
    0x180D,  # MONGOLIAN FREE VARIATION SELECTOR THREE
    0x180F,  # MONGOLIAN FREE VARIATION SELECTOR FOUR
    *range(
        0xFE00,  # VARIATION SELECTOR-1
        0xFE10
    ),
    *range(
        0xE0100,  # VARIATION SELECTOR-17
        0xE01F0
    ),
])}

def format_glyph(s):
    if not s:
        return ''
    cat = udata.category(s[0])
    if cat[0] == 'C':
        return ''
    if cat in {'Zl', 'Zp'}:
        return ''
    if cat in {'Me', 'Mn'}:
        if s in _vs:
            return ''
        s = '\N{DOTTED CIRCLE}' + s
    if s[-1] in _double_comb:
        s += '\N{DOTTED CIRCLE}'
    return s

def main():
    ap = argparse.ArgumentParser()
    if sys.version_info < (3, 10):
        # https://bugs.python.org/issue9694
        ap._optionals.title = 'options'
    ap.add_argument('--version', action=VersionAction)
    ap.add_argument('-G', dest='egc', action='store_true',
        help='use Extended Grapheme Clusters'
    )
    ap.add_argument('paths', metavar='FILE', nargs='*',
        help='file to analyze (default: stdin)'
    )
    ap.add_argument('--traceback', action='store_true', help=argparse.SUPPRESS)
    options = ap.parse_args()
    signal.signal(signal.SIGPIPE, signal.SIG_DFL)
    data = collections.Counter()
    read_file = [read_file_basic, read_file_egc][options.egc]
    enc_errors = sys.stdin.errors
    open_kw = dict(
        encoding=sys.stdin.encoding,
        errors=enc_errors,
        newline=''
    )
    if enc_errors in {'strict', 'surrogateescape'}:
        open_kw.update(errors='surrogatepass')
        sys.stdin.reconfigure(**open_kw)
    for path in options.paths or ['-']:
        if path == '-':
            read_file(data, sys.stdin)
        else:
            try:
                file = open(path, 'rt', **open_kw)
            except OSError as exc:
                if options.traceback:
                    raise
                msg = f'{ap.prog}: {path}: {exc.strerror}'
                print(msg, file=sys.stderr)
                sys.exit(1)
            with file:
                read_file(data, file)
    for clt, count in sorted(data.items()):
        glyph = format_glyph(clt)
        pts = format_pts(clt)
        names = format_names(clt)
        print(count, glyph, pts, names, sep='\t')

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
